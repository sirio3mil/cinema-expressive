# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

"Class Country"
type Country {
    countryId: ID!
    createdAt: DateTime!
    isoCode: String
    language: Language
    officialName: String!
}

"Class File"
type File {
    createdAt: DateTime!
    deleted: Boolean!
    deletionDate: DateTime!
    downloadName: String
    extension: String!
    fileId: ID!
    fileType: FileType!
    image: Image!
    mime: String!
    name: String!
    object: GlobalUniqueObject!
    originalName: String
    path: String!
    season: FileSeason!
    size: Int!
}

"Class FileSeason"
type FileSeason {
    file: File!
    season: Int!
}

"Class FileType"
type FileType {
    description: String!
    fileTypeId: ID!
}

"Class Genre"
type Genre {
    createdAt: DateTime!
    genreId: ID!
    name: String!
}

"Class Object"
type GlobalUniqueObject {
    files: [File]
    imdbNumber: ImdbNumber
    objectId: ID!
    people: People
    permanentLink: PermanentLink!
    ranking: Ranking
    rowType: RowType!
    searchValues: [SearchValue]
    tape: Tape
}

"Class Image"
type Image {
    file: File!
    height: Int!
    width: Int!
}

"Class ImdbNumber"
type ImdbNumber {
    imdbNumber: Int!
    object: GlobalUniqueObject!
}

"Class Language"
type Language {
    createdAt: DateTime!
    languageId: ID!
    name: String!
}

"Class Location"
type Location {
    createdAt: DateTime!
    locationId: ID!
    place: String!
}

type Mutation {
    editTapeUser(imdbNumbers: [Int], placeId: Int, tapeIds: [Int], tapeUserStatusId: Int!, userId: Int!): [TapeUser]
    importImdbEpisodeList(imdbNumber: Int!, seasonNumber: Int!): [TvShowChapter]
    importImdbMovie(imdbNumber: Int!): Tape
}

"Class People"
type People {
    aliases: [PeopleAlias]
    createdAt: DateTime!
    detail: PeopleDetail
    fullName: String!
    object: GlobalUniqueObject!
    peopleId: ID!
}

"Class PeopleAlias"
type PeopleAlias {
    alias: String!
    people: People!
    peopleAliasId: ID!
}

"Class PeopleAliasTape"
type PeopleAliasTape {
    createdAt: DateTime!
    peopleAlias: PeopleAlias!
    peopleAliasTapeId: ID!
    tape: Tape!
}

"Class PeopleDetail"
type PeopleDetail {
    birthDate: DateTime
    birthPlace: String
    country: Country
    createdAt: DateTime!
    deathDate: DateTime
    deathPlace: String
    gender: String
    havePhoto: Boolean!
    height: Int
    people: People!
    skip: Boolean!
    updatedAt: DateTime!
}

"Class PermanentLink"
type PermanentLink {
    object: GlobalUniqueObject!
    url: String!
}

"Class Place"
type Place {
    description: String!
    placeId: ID!
}

"Class Premiere"
type Premiere {
    country: Country
    createdAt: DateTime!
    date: DateTime!
    detail(observation: String!): PremiereDetail
    details: [PremiereDetail]
    place: String!
    premiereId: ID!
    tape: Tape!
}

"Class PremiereDetail"
type PremiereDetail {
    createdAt: DateTime!
    observation: String!
    premiere: Premiere!
    premiereDetailId: ID!
}

"Class Producer"
type Producer {
    country: Country
    name: String!
    producerId: ID!
}

type Query {
    getTape(tapeId: TapeID): Tape
    search(pattern: String!, rowType: Int): [SearchValue]
}

"Class Ranking"
type Ranking {
    calculatedScore: Float!
    object: GlobalUniqueObject!
    score: Float!
    votes: Int!
}

"Class Role"
type Role {
    role: String!
    roleId: ID!
}

"Class RowType"
type RowType {
    description: String!
    rowTypeId: ID!
}

"Class SearchValue"
type SearchValue {
    object: GlobalUniqueObject!
    primaryParam: Boolean!
    searchParam: String!
    searchValueId: ID!
}

"Class Sound"
type Sound {
    createdAt: DateTime!
    description: String!
    soundId: ID!
}

"Class Tag"
type Tag {
    createdAt: DateTime!
    keyword: String!
    tagId: ID!
}

"Class Tape"
type Tape {
    aliases: [PeopleAliasTape]
    certification(country: CountryID!): TapeCertification
    certifications: [TapeCertification]
    countries: [Country]!
    createdAt: DateTime!
    default: TapeDefaultValue!
    detail: TapeDetail
    genres: [Genre]!
    languages: [Language]
    locations: [Location]!
    object: GlobalUniqueObject!
    originalTitle: String!
    people: [TapePeopleRole]
    peopleAliasTape(peopleAlias: PeopleAliasID!): PeopleAliasTape
    plot: TapePlot
    premiere(country: CountryID, date: DateTime!): Premiere
    premieres: [Premiere]
    producers: [Producer]!
    sounds: [Sound]!
    tags: [Tag]!
    tapeId: ID!
    tapePeopleRole(people: PeopleID!, role: RoleID!): TapePeopleRole
    title(country: CountryID, title: String!): TapeTitle
    titles: [TapeTitle]
    tvShow: TvShow
    tvShowChapter: TvShowChapter
    user(user: UserID!): TapeUser
    users: [TapeUser]!
}

"Class TapeCertification"
type TapeCertification {
    certification: String
    country: Country
    createdAt: DateTime!
    tape: Tape!
    tapeCertificationId: ID!
}

"Class TapeDefaultValue"
type TapeDefaultValue {
    cast: People
    country: Country
    director: People
    tape: Tape!
    title: SearchValue!
}

"Class TapeDetail"
type TapeDetail {
    adult: Boolean!
    budget: Float!
    color: String
    createdAt: DateTime!
    currency: Int!
    duration: Int
    haveCover: Boolean!
    isTvShow: Boolean!
    tape: Tape!
    updatedAt: DateTime!
    year: Int
}

"Class TapePeopleRole"
type TapePeopleRole {
    character: TapePeopleRoleCharacter
    createdAt: DateTime!
    people: People!
    role: Role!
    tape: Tape!
    tapePeopleRoleId: ID!
}

"Class TapePeopleRoleCharacter"
type TapePeopleRoleCharacter {
    character: String!
    createdAt: DateTime!
    tapePeopleRole: TapePeopleRole!
}

"Class TapePlot"
type TapePlot {
    plot: String!
    tape: Tape!
}

"Class TapeTitle"
type TapeTitle {
    country: Country
    language: Language
    observations: String
    tape: Tape!
    tapeTitleId: ID!
    title: String!
}

"Class TapeUser"
type TapeUser {
    createdAt: DateTime!
    history: [TapeUserHistory]!
    historyByStatus(tapeUserStatus: TapeUserStatusID!): TapeUserHistory
    score: TapeUserScore
    tape: Tape!
    tapeUserId: ID!
    user: User!
}

"Class TapeUserHistory"
type TapeUserHistory {
    createdAt: DateTime!
    detail: TapeUserHistoryDetail
    tapeUser: TapeUser!
    tapeUserHistoryId: ID!
    tapeUserStatus: TapeUserStatus
}

"Class TapeUserHistoryDetail"
type TapeUserHistoryDetail {
    createdAt: DateTime!
    exported: Boolean!
    place: Place
    tapeUserHistory: TapeUserHistory!
    updatedAt: DateTime!
    visible: Boolean!
}

"Class TapeUserScore"
type TapeUserScore {
    createdAt: DateTime!
    exported: Boolean!
    score: Float!
    tapeUser: TapeUser!
}

"Class TapeUserStatus"
type TapeUserStatus {
    description: String!
    tapeUserStatusId: ID!
}

"Class TvShow"
type TvShow {
    chapters: [TvShowChapter]
    createdAt: DateTime!
    finished: Boolean!
    tape: Tape!
}

"Class TvShowChapter"
type TvShowChapter {
    chapter: Int!
    createdAt: DateTime!
    season: Int
    tape: Tape!
    tvShow: TvShow!
}

"Class User"
type User {
    createdAt: DateTime!
    email: String!
    name: String!
    password: String!
    rememberToken: String!
    updatedAt: DateTime!
    userId: ID!
}


scalar DateTime

"Automatically generated type to be used as input where an object of type `TapeUserStatus` is needed"
scalar TapeUserStatusID

"Automatically generated type to be used as input where an object of type `User` is needed"
scalar UserID

"Automatically generated type to be used as input where an object of type `People` is needed"
scalar PeopleID

"Automatically generated type to be used as input where an object of type `Role` is needed"
scalar RoleID

"Automatically generated type to be used as input where an object of type `PeopleAlias` is needed"
scalar PeopleAliasID

"Automatically generated type to be used as input where an object of type `Country` is needed"
scalar CountryID

"Automatically generated type to be used as input where an object of type `Tape` is needed"
scalar TapeID